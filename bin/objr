#!/usr/bin/env python3
# This file is placed in the Public Domain.


import json
import logging
import os
import os.path
import sys
import time


sys.path.insert(0, os.getcwd())


from objz.command import Commands, Config, Event, command, modules, scanner
from objz.methods import parse
from objz.objects import update
from objz.persist import Workdir
from objz.utility import daemon, forever, inits, privileges, level, spl


from objr.clients import Client


Config.name = "objr"
Workdir.wdr = os.path.expanduser(f"~/.{Config.name}")


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        print(txt.encode('utf-8', 'replace').decode("utf-8"))


class Console(CLI):

    def callback(self, event):
        if not event.txt:
            return
        super().callback(event)
        event.wait()

    def poll(self):
        evt = Event()
        evt.txt = input("> ")
        evt.type = "command"
        return evt


class Event(Event):

    def dosay(self, txt):
        print(txt)


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print("%s %s since %s (%s)" % (Config.name.upper(), Config.version, tme, Config.level.upper()))


def background():
    daemon("-v" in sys.argv)
    privileges()
    boot(False)
    pidfile(pidname(Config.name))
    inits("mods", "mods", spl(Config.init or Config.default))
    forever()


def boot(doparse=True):
    if doparse:
        parse(Config, " ".join(sys.argv[1:]))
        update(Config, Config.sets, empty=False)
    level(Config.level)
    if "v" in Config.opts:
        banner()
    if "a" in Config.opts:
        Config.init = ",".join(modules("mods"))
    logging.info("workdir is %s", Workdir.wdr)
    scanner("mods", "mods")


def console():
    import readline # noqa: F401
    boot()
    for _mod, thr in inits("mods", "mods", spl(Config.init or Config.default)):
        if "w" in Config.opts:
            thr.join(30.0)
    csl = Console()
    csl.start()
    forever()


def control():
    if len(sys.argv) == 1:
        return
    boot()
    csl = CLI()
    evt = Event()
    evt.orig = repr(csl)
    evt.type = "command"
    evt.txt = Config.otxt
    command(evt)
    evt.wait()


def service():
    privileges()
    boot(False)
    pidfile(pidname(Config.name))
    banner()
    inits("mods", "mods", spl(Config.init or Config.default))
    forever()


def ver(event):
    event.reply(f"{Config.name.upper()} {Config.version}")


def wrapped(func):
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")


def wrap(func):
    import termios
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        wrapped(func)
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)


def check(txt):
    args = sys.argv[1:]
    for arg in args:
        if not arg.startswith("-"):
            continue
        for char in txt:
            if char in arg:
                return True
    return False


def main():
    if check("c"):
        wrap(console)
    elif check("d"):
        background()
    elif check("s"):
        wrapped(service)
    else:
        wrapped(control)


if __name__ == "__main__":
    main()
